package com.example.kmpuniversalapp.libs.notification

import com.example.kmpuniversalapp.libs.utils.log.AppLogger

/**
 * Apple Push Notification Service实现
 * 使用expect/actual模式实现平台特定功能
 */
expect class APNSService : NotificationService

/**
 * APNs配置
 */
data class APNSConfig(
    val teamId: String,
    val keyId: String,
    val bundleId: String,
    val environment: APNSEnvironment = APNSEnvironment.SANDBOX
)

/**
 * APNs环境
 */
enum class APNSEnvironment {
    SANDBOX,    // 开发环境
    PRODUCTION  // 生产环境
}

/**
 * APNs服务实现 - 通用部分
 */
abstract class APNSServiceBase(
    private val config: APNSConfig
) : NotificationService {
    
    protected var isInitialized = false
    protected var deviceToken: String? = null
    
    override suspend fun initialize() {
        if (isInitialized) return
        
        AppLogger.d("APNSService", "Initializing APNs with teamId: ${config.teamId}")
        
        try {
            initializePlatform()
            isInitialized = true
            AppLogger.i("APNSService", "APNs initialized successfully")
        } catch (e: Exception) {
            AppLogger.e("APNSService", "Failed to initialize APNs", e)
            throw e
        }
    }
    
    override suspend fun registerToken(): String? {
        if (!isInitialized) {
            AppLogger.w("APNSService", "APNs not initialized, cannot register token")
            return null
        }
        
        try {
            deviceToken = registerTokenPlatform()
            AppLogger.i("APNSService", "Device token registered: $deviceToken")
            return deviceToken
        } catch (e: Exception) {
            AppLogger.e("APNSService", "Failed to register token", e)
            return null
        }
    }
    
    override suspend fun sendNotification(
        title: String,
        content: String,
        data: Map<String, String>
    ) {
        if (!isInitialized) {
            AppLogger.w("APNSService", "APNs not initialized, cannot send notification")
            return
        }
        
        try {
            sendNotificationPlatform(title, content, data)
            AppLogger.i("APNSService", "Notification sent: $title")
        } catch (e: Exception) {
            AppLogger.e("APNSService", "Failed to send notification", e)
        }
    }
    
    override suspend fun setUserTags(tags: Map<String, String>) {
        if (!isInitialized) {
            AppLogger.w("APNSService", "APNs not initialized, cannot set tags")
            return
        }
        
        try {
            setUserTagsPlatform(tags)
            AppLogger.i("APNSService", "User tags set: $tags")
        } catch (e: Exception) {
            AppLogger.e("APNSService", "Failed to set user tags", e)
        }
    }
    
    override suspend fun clearUserTags() {
        if (!isInitialized) {
            AppLogger.w("APNSService", "APNs not initialized, cannot clear tags")
            return
        }
        
        try {
            clearUserTagsPlatform()
            AppLogger.i("APNSService", "User tags cleared")
        } catch (e: Exception) {
            AppLogger.e("APNSService", "Failed to clear user tags", e)
        }
    }
    
    override suspend fun checkPermission(): NotificationPermission {
        return checkPermissionPlatform()
    }
    
    override suspend fun requestPermission(): Boolean {
        return requestPermissionPlatform()
    }
    
    // 平台特定实现方法
    protected abstract suspend fun initializePlatform()
    protected abstract suspend fun registerTokenPlatform(): String?
    protected abstract suspend fun sendNotificationPlatform(
        title: String,
        content: String,
        data: Map<String, String>
    )
    protected abstract suspend fun setUserTagsPlatform(tags: Map<String, String>)
    protected abstract suspend fun clearUserTagsPlatform()
    protected abstract suspend fun checkPermissionPlatform(): NotificationPermission
    protected abstract suspend fun requestPermissionPlatform(): Boolean
}
